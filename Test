# coding=utf-8
import os
import math
import random
import matplotlib.pyplot as plt
from tqdm import tqdm
import torch
import torchvision
import torch.nn as nn
import torch.nn.functional as F
from torchvision import models
import torch.optim as optim
from torch.utils.data import DataLoader
import time
import numpy as np


plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签
plt.rcParams['axes.unicode_minus'] = False  # 用来正常显示负号

model = torch.load('dog.pth', map_location=torch.device('cpu'))

from PIL import Image

from torchvision import transforms

# 有 GPU 就用 GPU，没有就用 CPU
device = torch.device('cpu')
print('device', device)

# 训练集图像预处理：缩放裁剪、图像增强、转 Tensor、归一化
train_transform = transforms.Compose([transforms.RandomResizedCrop(224),
                                      transforms.RandomHorizontalFlip(),
                                      transforms.ToTensor(),
                                      transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
                                     ])

# 测试集图像预处理-RCTN：缩放、裁剪、转 Tensor、归一化
test_transform = transforms.Compose([transforms.Resize(256),
                                     transforms.CenterCrop(224),
                                     transforms.ToTensor(),
                                     transforms.Normalize(
                                         mean=[0.485, 0.456, 0.406],
                                         std=[0.229, 0.224, 0.225])
                                    ])

# 将预测结果转换为类别名称
# 根据data里的类别来填写
idx_to_labels = {0: "", 1: "", 2: "", 3: "", 4: "", 5:""}

# 加载并预处理图像
image_path = "36.jpeg"
image = Image.open(image_path).convert("RGB")
image = test_transform(image).unsqueeze(0)

# 使用模型进行预测
model.eval()
# 随机测试图片目录路径
val_dir = 'data/random'

# 获取data-val目录下的所有图片文件路径
image_paths = [os.path.join(val_dir, file) for file in os.listdir(val_dir) if file.endswith('.jpg')]

# 随机选择4张图片
random_images = random.sample(image_paths, 4)

# 计算子图的行数和列数
num_images = len(random_images)
rows = int(math.sqrt(num_images))
cols = math.ceil(num_images / rows)

# 创建一个子图布局
fig, axes = plt.subplots(rows, cols, figsize=(10, 10))

# 展示随机图片并打印预测结果
for i, image_path in enumerate(random_images):
    image = Image.open(image_path)
    image2 = Image.open(image_path).convert("RGB")
    image2 = test_transform(image2).unsqueeze(0)

    with torch.no_grad():
        output = model(image2)
        _, predicted = torch.max(output, 1)

    row = i // cols
    col = i % cols
    ax = axes[row, col] if rows > 1 else axes[col]
    ax.imshow(image)
    ax.set_title("预测结果：" + idx_to_labels[predicted.item()],fontsize=30)
    ax.axis('off')

# 如果子图数量不足以填满整个布局，删除多余的子图
if num_images < rows * cols:
    if rows > 1:
        for i in range(num_images, rows * cols):
            fig.delaxes(axes[i // cols, i % cols])
    else:
        for i in range(num_images, rows * cols):
            fig.delaxes(axes[i])

plt.tight_layout()
plt.show()
